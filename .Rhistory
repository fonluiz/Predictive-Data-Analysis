dados.horarios.paradas <- dados.horarios.paradas %>%
dplyr::group_by(rota, week_day, trip_id) %>%
dplyr::arrange(stop_sequence) %>%
dplyr::mutate(
horario_inicial = first(arrival_time),
horario_final = last(arrival_time),
duracao = time_difference(horario_inicial, horario_final)
)
trip_code <- function(arrival_time){
hour <- hour(strptime(arrival_time, "%H:%M:%S"))
minute <- minute(strptime(arrival_time, "%H:%M:%S"))
if (minute < 30) {
hour <- hour + 0.1
} else {
hour <- hour + 0.2
}
return(hour)
}
trip_code <- function(arrival_time){
hour <- hour(strptime(arrival_time, "%H:%M:%S"))
minute <- minute(strptime(arrival_time, "%H:%M:%S"))
if (minute < 30) {
trip_code <- hour + 0.1
} else {
trip_code <- hour + 0.2
}
return(trip_code)
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(trip_code = trip_code(horario_inicial))
# Adiciona a coluna tipo_dia, que classifica a viagem em um dos grupos acima
group_of_week_day <- function(week_day) {
if (week_day %in% group1) {
return("SUN")
} else if (week_day %in% group2) {
return("MON")
} else if (week_day %in% group3) {
return("TUE WED THU")
} else if (week_day %in% group4) {
return("FRI")
} else if (week_day %in% group5) {
return("SAT")
}
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(tipo_dia = group_of_week_day(week_day))
# Retirar as últimas paradas de cada viagem para que não sejam contadas duas vezes
dados.horarios.paradas <- dados.horarios.paradas %>%
ungroup %>%
group_by(rota, trip_id) %>%
filter(stop_sequence != max(stop_sequence))
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
mean_time <- strptime(paste(5, 36, "00", sep = ":"), "%H:%M:%S")
mean_time
hms(mean_time)
mean_time <- strptime(paste(5, 36.56, "00", sep = ":"), "%H:%M:%S")
mean_time
mean_time <- strptime(paste(5, 36.56, "00", sep = ":"), "%H:%M:%S", usetz = FALSE)
strftime("2016-05-13 05:36:00 BRT", format = "%H:%M:%S")
average_hour <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste <- dados.horarios.paradas %>%
group_by(rota, tipo_dia, trip_code, stop_id) %>%
summarise(
horario_medio = average_hour(trip_code, mean(minute(strptime(arrival_time, "%H:%M:%S")))),
n = n()
)
teste <- dados.horarios.paradas %>%
group_by(rota, tipo_dia, trip_code, stop_id) %>%
summarise(
horario_medio = average_hour(trip_code, mean(minute(strptime(arrival_time, "%H:%M:%S")))),
n = n()
)
teste <- dados.horarios.paradas %>%
group_by(rota, tipo_dia, trip_code, stop_id) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
teste <- teste %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste <- teste %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste <- teste %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste <- teste %>%
arrange(rota, tipo_dia, trip_code)
# Script para calcular o intervalo de confiança
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
stop_times <- read.csv("~/stop_times_3months_ok.csv")
dados.horarios.paradas <- stop_times %>%
separate(trip_id, c("rota","week_day","trip_id"), "_", remove = TRUE)
# Calcula a diferança de tempo entre dois horários
time_difference <- function(time1, time2){
diff <- as.numeric(
difftime(
strptime(time1, "%H:%M:%S"),
strptime(time2, "%H:%M:%S"),
units = "mins"
)
)
return(abs(diff))
}
# Adiciona colunas horario_inicial, horario_final, duracao
dados.horarios.paradas <- dados.horarios.paradas %>%
dplyr::group_by(rota, week_day, trip_id) %>%
dplyr::arrange(stop_sequence) %>%
dplyr::mutate(
horario_inicial = first(arrival_time),
horario_final = last(arrival_time),
duracao = time_difference(horario_inicial, horario_final)
)
# Adiciona o código da viagem
trip_code <- function(arrival_time){
hour <- hour(strptime(arrival_time, "%H:%M:%S"))
minute <- minute(strptime(arrival_time, "%H:%M:%S"))
if (minute < 30) {
trip_code <- hour + 0.1
} else {
trip_code <- hour + 0.2
}
return(trip_code)
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(trip_code = trip_code(horario_inicial))
group1 <- c("Sunday")
group2 <- c("Monday")
group3 <- c("Tuesday", "Wednesday", "Thursday")
group4 <- c("Friday")
group5 <- c("Saturday")
# Adiciona a coluna tipo_dia, que classifica a viagem em um dos grupos acima
group_of_week_day <- function(week_day) {
if (week_day %in% group1) {
return("SUN")
} else if (week_day %in% group2) {
return("MON")
} else if (week_day %in% group3) {
return("TUE WED THU")
} else if (week_day %in% group4) {
return("FRI")
} else if (week_day %in% group5) {
return("SAT")
}
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(tipo_dia = group_of_week_day(week_day))
# Adiciona o código da viagem (Este trip_code categoriza as viagens)
# X:00 - X:15 - X:30 - X:45
trip_code <- function(arrival_time){
hour <- hour(strptime(arrival_time, "%H:%M:%S"))
minute <- minute(strptime(arrival_time, "%H:%M:%S"))
if (minute < 15) {
trip_code <- hour + 0.00
} else if (minute < 30) {
trip_code <- hour + 0.15
} else if (minute < 45) {
trip_code <- hour + 0.30
} else {
trip_code <- hour + 0.45
}
return(trip_code)
}
View(dados.horarios.paradas)
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(trip_code = trip_code(horario_inicial))
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(
tipo_dia = group_of_week_day(week_day),
tipo_parada = ifelse(stop_sequence == 1, "saida", "chegada")
)
warnings()
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste1 <- dados.horarios.paradas %>%
filter(rota == 500)
View(teste1)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
View(teste2)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = average_time(mean(minute(strptime(arrival_time, "%H:%M:%S")))),
n = n()
)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = average_time(trip_code, mean(minute(strptime(arrival_time, "%H:%M:%S")))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
strptime(paste(5, 15, "00", sep = ":"), "%H:%M:%S")
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- floor(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
strptime(paste(5, 15.653254, "00", sep = ":"), "%H:%M:%S")
Deixa o horário médio no formato hh:mm:00
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- as.integer(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
# Deixa o horário médio no formato hh:mm:00
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- as.integer(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
View(average_time)
View(average_time)
as.integer(12.65654)
as.integer(12.5)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
return(mean_time);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
View(teste1)
View(teste2)
trip_code <- function(horario_inicial,horario_final){
hour_i <- hour(strptime(horario_inicial, "%H:%M:%S"))
hour_f <- hour(strptime(horario_final, "%H:%M:%S"))
minute <- minute(strptime(horario_inicial, "%H:%M:%S"))
if (minute < 15) {
trip_code <- paste(hour_i,hour_f,"00", sep=".")
} else if (minute < 30) {
trip_code <- paste(hour_i,hour_f,"15", sep=".")
} else if (minute < 45) {
trip_code <- paste(hour_i,hour_f,"30", sep=".")
} else {
trip_code <- paste(hour_i,hour_f,"45", sep=".")
}
return(trip_code)
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(trip_code = trip_code(horario_inicial,horario_final))
View(dados.horarios.paradas)
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(
tipo_dia = group_of_week_day(week_day),
tipo_parada = ifelse(stop_sequence == 1, "saida", "chegada")
)
teste1 <- dados.horarios.paradas %>%
filter(rota == 500)
strsplit("1.2.3",sep=".")
strsplit("1.2.3",".")
strsplit("1.2.3"," . ")
strsplit("1.2.3"," .")
strsplit("1.2.3",".")
strsplit("1.2.3","[.]")
strsplit("1.2.3","[.]")[1]
strsplit("1.2.3","[.]")[[1]]
strsplit("1.2.3","[.]")
strsplit("1.2.3","[.]")[[1]][1]
strsplit("1.2.3","[.]")[[1]][2]
average_time <- function(trip_code, minute,tipo_parada) {
hour <- 00
if (tipo_parada == "saida"){
hour <- strsplit(trip_code,"[.]")[[1]][1]
} else{ #chegada
hour <- strsplit(trip_code,"[.]")[[1]][2]
}
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste1 <- dados.horarios.paradas %>%
filter(rota == 500)
# WARNING: Este bloco demora muito para rodar. O teste aparentemente deu certo. Falta calcular variância
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
View(teste2)
teste2 <- teste2 %>%
ungroup() %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste2 %>%
ungroup() %>%
group_by(rota, tipo_dia, trip_code) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste2 %>%
ungroup() %>%
group_by(trip_code, media_min,tipo_parada) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
ungroup() %>%
group_by(trip_code, media_min,tipo_parada) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
View(teste2)
install.packages("dplyr")
View(dados.horarios.paradas)
View(dados.horarios.paradas)
View(dados.horarios.paradas)
View(teste2)
View(dados.horarios.paradas)
View(viagens.por.dia)
getwd()
getwd()
schedules_ctba <- read.csv("~/Analytics/busmonitor/R/best_trip_recommender/data/schedules_ctba.csv")
View(schedules_ctba)
library(lubridate)
hms("2016-06-24 06:44:19")
ymd("2016-06-24 06:44:19")
as.Date("2016-06-24 06:44:19")
as.Time("2016-06-24 06:44:19")
format("2016-06-24 06:44:19", "%H:%M:%S")
format(ymd_hms("2016-06-24 06:44:19"), "%H:%M:%S")
schedules_ctba$inicio_viagem <- format(ymd_hms(schedules_ctba$inicio_viagem), "%H:%M:%S")
schedules_ctba$fim_viagem <- format(ymd_hms(schedules_ctba$fim_viagem), "%H:%M:%S")
write.csv(schedules_ctba, "schedules_ctba.csv")
library(plotly)
library(plotly)
library(dplyr)
library(ggplot2)
library(scales)
library(reshape2)
library(plotly)
alunos_ufcg <- read.csv("../data/alunosUFCGAnon.csv")
setwd("Predictive-Data-Analysis/")
alunos_ufcg <- read.csv("../data/alunosUFCGAnon.csv")
alunos_ufcg <- read.csv("data/alunosUFCGAnon.csv")
get_turno <- function(nome_curso) {
turno <- substring(nome_curso, nchar(nome_curso))
return(
ifelse(turno == "A", "D", turno)
)
}
alunos_ufcg$Turno_Curso = get_turno(as.character(alunos_ufcg$Nome_Curso))
turnos_por_mediana <- with(alunos_ufcg, reorder(Turno_Curso, Media_Disciplina, median, na.rm = TRUE))
ggplot(alunos_ufcg, aes(x = turnos_por_mediana, y = Media_Disciplina, na.rm = TRUE)) + geom_boxplot()
install.packages("plotly")
getwd()
setwd("/home/luizaf/Predictive-Data-Analysis")
alunos_computacao <- alunos_ufcg %>% filter(Nome_Curso == "CIÊNCIA DA COMPUTAÇÃO - D")
alunos_ufcg <- read.csv("data/alunosUFCGAnon.csv")
turnos_por_mediana <- with(alunos_ufcg, reorder(Turno_Curso, Media_Disciplina, median, na.rm = TRUE))
ggplot(alunos_ufcg, aes(x = turnos_por_mediana, y = Media_Disciplina, na.rm = TRUE)) + geom_boxplot() +
labs(title = "Notas dos alunos em cursos de diferentes turnos", x = "Turnos", y = "Notas dos alunos") +
scale_fill_discrete(labels=c("Diurno", "Noturno", "Matutino", "Vespertino"))
get_turno <- function(nome_curso) {
turno <- substring(nome_curso, nchar(nome_curso))
return(
ifelse(turno == "A" | turno == "D", "Diurno",
ifelse(turno == "N", "Noturno",
ifelse(turno == "M", "Matutino", "Vespertino")))
)
}
alunos_ufcg$Turno_Curso = get_turno(as.character(alunos_ufcg$Nome_Curso))
turnos_por_mediana <- with(alunos_ufcg, reorder(Turno_Curso, Media_Disciplina, median, na.rm = TRUE))
ggplot(alunos_ufcg, aes(x = turnos_por_mediana, y = Media_Disciplina, na.rm = TRUE)) + geom_boxplot() +
labs(title = "Notas dos alunos em cursos de diferentes turnos", x = "Turnos", y = "Notas dos alunos")
x <- alunos_ufcg %>% filter(Campus == 1)
unique(x$Cod_Curso)
n(unique(x$Cod_Curso))
size(unique(x$Cod_Curso))
length(unique(x$Cod_Curso))
