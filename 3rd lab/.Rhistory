ungroup() %>%
select(matricula, disciplina, media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(alunos.evadiu)
model.input$evadiu <- as.factor(model.input$evadiu)
return(model.input)
}
model.input.data <- convert.data.to.model.input(dados)
names(model.input.data) <- c("matricula", "vetorial", "calculo1", "IC", "LP1", "LPT", "P1", "evadiu", "ano", "periodo")
getwd()
setwd('Faculdade/Predictive-Data-Analysis/3rd lab/')
library(reshape2)
library(dplyr)
library(caret)
dados <- read.csv("../data/treino_classificacao.csv")
names(dados) <- c("matricula", "cod_disciplina", "disciplina", "ano", "periodo", "media", "evadiu")
convert.data.to.model.input <- function(dataframe) {
dataframe <- dataframe %>% select(-cod_disciplina) %>% filter(!is.na(media))
alunos.evadiu <- dataframe %>%
group_by(matricula) %>%
summarise(evadiu = any(evadiu),
ano = first(ano),
periodo = first(periodo))
model.input <- dataframe %>%
group_by(matricula, disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula, disciplina, media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(alunos.evadiu)
model.input$evadiu <- as.factor(model.input$evadiu)
return(model.input)
}
model.input.data <- convert.data.to.model.input(dados)
names(model.input.data) <- c("matricula", "vetorial", "calculo1", "IC", "LP1", "LPT", "P1", "evadiu", "ano", "periodo")
library(Amelia)
missmap(model.input.data, main = "Valores em Falta vs Valores Observados")
model.input.data <- model.input.data %>% select(-LPT)
library(VIM)
disciplinas <- model.input.data %>% select(vetorial, calculo1, IC, LP1, P1)
aggr_plot <- aggr(disciplinas, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(disciplinas), cex.axis=.7, gap=3, ylab=c("Histograma de dados em falta","Padrão"), cex.numbers=.7)
train.data <- model.input.data %>% filter(ano >= 2011, ano != 2015) %>% select(-ano, -periodo)
test.data <- model.input.data %>% filter(ano == 2015) %>% select(-ano, -periodo)
# Conta quantos valores estão abaixo de 7 no vetor passado
medias.abaixo.7 <- function(medias) {
temp <- medias[medias < 7]
return(length(temp))
}
medias.abaixo.7 <- dados %>%
group_by(matricula) %>%
summarise(medias.abaixo.7 = medias.abaixo.7(media))
train.data <- inner_join(train.data, medias.abaixo.7, by = "matricula")
test.data <- inner_join(test.data, medias.abaixo.7, by = "matricula")
set.seed(123)
glm.fit <- train(evadiu ~ . -matricula,
data=train.data,
method="glm",
family="binomial",
na.action = na.omit)
library("rpart")
decision.tree.fit <- rpart(evadiu ~ . -matricula, data=train.data)
summary(glm.fit)
summary(glm.fit)
anova(glm.fit, test="Chisq")
test.data$prediction <- predict(glm.fit, test.data)
test.data$prediction <- predict(glm.fit, test.data)
View(test.data)
library(reshape2)
library(dplyr)
library(caret)
dados <- read.csv("../data/treino_classificacao.csv")
names(dados) <- c("matricula", "cod_disciplina", "disciplina", "ano", "periodo", "media", "evadiu")
convert.data.to.model.input <- function(dataframe) {
dataframe <- dataframe %>% select(-cod_disciplina) %>% filter(!is.na(media))
alunos.evadiu <- dataframe %>%
group_by(matricula) %>%
summarise(evadiu = any(evadiu),
ano = first(ano),
periodo = first(periodo))
model.input <- dataframe %>%
group_by(matricula, disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula, disciplina, media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(alunos.evadiu)
model.input$evadiu <- as.factor(model.input$evadiu)
return(model.input)
}
model.input.data <- convert.data.to.model.input(dados)
names(model.input.data) <- c("matricula", "vetorial", "calculo1", "IC", "LP1", "LPT", "P1", "evadiu", "ano", "periodo")
library(Amelia)
missmap(model.input.data, main = "Valores em Falta vs Valores Observados")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, set.seed(825), message=FALSE, warning=FALSE)
# Chunk 2
library(reshape2)
library(dplyr)
library(caret)
dados <- read.csv("../data/treino_classificacao.csv")
names(dados) <- c("matricula", "cod_disciplina", "disciplina", "ano", "periodo", "media", "evadiu")
convert.data.to.model.input <- function(dataframe) {
dataframe <- dataframe %>% select(-cod_disciplina) %>% filter(!is.na(media))
alunos.evadiu <- dataframe %>%
group_by(matricula) %>%
summarise(evadiu = any(evadiu),
ano = first(ano),
periodo = first(periodo))
model.input <- dataframe %>%
group_by(matricula, disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula, disciplina, media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(alunos.evadiu)
model.input$evadiu <- as.factor(model.input$evadiu)
return(model.input)
}
model.input.data <- convert.data.to.model.input(dados)
names(model.input.data) <- c("matricula", "vetorial", "calculo1", "IC", "LP1", "LPT", "P1", "evadiu", "ano", "periodo")
# Chunk 3
library(Amelia)
missmap(model.input.data, main = "Valores em Falta vs Valores Observados")
# Chunk 4
model.input.data <- model.input.data %>% select(-LPT)
library(VIM)
disciplinas <- model.input.data %>% select(vetorial, calculo1, IC, LP1, P1)
aggr_plot <- aggr(disciplinas, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(disciplinas), cex.axis=.7, gap=3, ylab=c("Histograma de dados em falta","Padrão"), cex.numbers=.7)
# Chunk 5
model.input.data <- model.input.data %>%
mutate(vetorial = ifelse(is.na(vetorial),
ifelse(is.na(calculo1),
0.0,
calculo1),
vetorial),
calculo1 = ifelse(is.na(calculo1),
ifelse(is.na(vetorial),
0.0,
vetorial),
calculo1),
LP1 = ifelse(is.na(LP1),
ifelse(is.na(P1),
0.0,
P1),
LP1),
P1 = ifelse(is.na(P1),
ifelse(is.na(LP1),
0.0,
LP1),
P1),
IC = ifelse(is.na(IC),
round(mean(c(vetorial, calculo1, LP1, P1)), 2),
IC)
)
# Chunk 6
train.data <- model.input.data %>% filter(ano >= 2011, ano != 2015) %>% select(-ano, -periodo)
test.data <- model.input.data %>% filter(ano == 2015) %>% select(-ano, -periodo)
# Chunk 7
# Conta quantos valores estão abaixo de 7 no vetor passado
medias.abaixo.7 <- function(medias) {
temp <- medias[medias < 7]
return(length(temp))
}
medias.abaixo.7 <- dados %>%
group_by(matricula) %>%
summarise(medias.abaixo.7 = medias.abaixo.7(media))
train.data <- inner_join(train.data, medias.abaixo.7, by = "matricula")
test.data <- inner_join(test.data, medias.abaixo.7, by = "matricula")
# Chunk 8
set.seed(123)
glm.fit <- train(evadiu ~ . -matricula,
data=train.data,
method="glm",
family="binomial",
na.action = na.omit)
# Chunk 9
library("rpart")
decision.tree.fit <- rpart(evadiu ~ . -matricula, data=train.data)
# Chunk 10
summary(glm.fit)
# Chunk 11
test.data$prediction <- predict(glm.fit, test.data)
# Chunk 12
test.data$prediction <- predict(glm.fit, test.data)
glm.prediction <- predict(glm.fit, test.data)
test.data$glm.prediction <- predict(glm.fit, test.data)
x <- table(test.data$evadiu)
x
temp <- test.data %>% select(evadiu, glm.prediction)
TP <- temp %>% filter(evadiu == TRUE, glm.prediction == TRUE) %>% length()
TP
TP <- temp %>% filter(evadiu == TRUE, glm.prediction == TRUE) %>% nrow()
TP
TP <- temp %>% filter(evadiu == TRUE, glm.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, glm.prediction == FALSE) %>% nrow()
TP <- temp %>% filter(evadiu == TRUE, glm.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, glm.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, glm.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, glm.prediction == FALSE) %>% nrow()
169 + 9 + 3 + 8
print(paste('Accuracy', (TP + TN)/(TP+TN+FP+FN))
)
print(paste('Accuracy', (TP + TN)/(TP+TN+FP+FN)))
print(paste('Precision', TP / (TP + FP)))
print(paste('Recall', TP / (TP + FN)))
test.data$dt.prediction <- predict(decision.tree.fit, test.data)
dt.prediction <- predict(decision.tree.fit, test.data)
View(dt.prediction)
typeof(dt.prediction)
dt.prediction$TRUE
dt.prediction['TRUE']
str(dt.prediction)
dt.prediction <- as.data.frame(predict(decision.tree.fit, test.data))
test.data$dt.prediction <- lapply(dt.prediction, function(x){return(x > 0.5)})
test.data$dt.prediction <- lapply(dt.prediction$TRUE, function(x){return(x > 0.5)})
dt.prediction$TRUE
dt.prediction['TRUE']
test.data$dt.prediction <- lapply(dt.prediction['TRUE'], function(x){return(x > 0.5)})
View(test.data)
temp <- lapply(dt.prediction['TRUE'], function(x){return(x > 0.5)})
test.data$dt.prediction <- temp
test.data$dt.prediction <- temp
temp <- apply(dt.prediction['TRUE'], function(x){return(x > 0.5)})
test.data$dt.prediction <- temp
temp <- apply(dt.prediction['TRUE'], FUN = function(x){return(x > 0.5)})
temp <- apply(dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$dt.prediction <- temp
dt.prediction <- as.data.frame(predict(decision.tree.fit, test.data))
temp <- apply(dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$dt.prediction <- temp
temp <- test.data %>% select(evadiu, dt.prediction)
TP <- temp %>% filter(evadiu == TRUE, dt.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, dt.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, dt.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, dt.prediction == FALSE) %>% nrow()
str(test.data)
dt.prediction <- as.data.frame(predict(decision.tree.fit, test.data))
temp <- apply(dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$dt.prediction <- as.factor(temp)
temp <- test.data %>% select(evadiu, dt.prediction)
TP <- temp %>% filter(evadiu == TRUE, dt.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, dt.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, dt.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, dt.prediction == FALSE) %>% nrow()
print(paste('Accuracy', (TP + TN)/(TP+TN+FP+FN)))
print(paste('Precision', TP / (TP + FP)))
print(paste('Recall', TP / (TP + FN)))
0.529 - 0.411
glm.fit <- train(evadiu ~ . -matricula,
data=train.data,
method="lasso",
family="binomial",
na.action = na.omit)
fitControl <- trainControl(method = "cv",
number = 10)
glm.fit <- train(evadiu ~ . -matricula,
data=train.data,
trControl = fitControl,
method = 'lasso',
preProcess = c('scale', 'center'),
na.action = na.omit)
lasso.fit <- train(evadiu ~ . -matricula,
data=train.data,
trControl = fitControl,
method = 'lasso',
preProcess = c('scale', 'center'),
na.action = na.omit)
str(train.data)
lasso.fit <- train(evadiu ~ . -matricula,
data=train.data,
trControl = fitControl,
method = 'glm',
preProcess = c('scale', 'center'),
na.action = na.omit)
install.packages("glmnet", repos = "http://cran.us.r-project.org")
library(glmnet)
View(train.data)
fit = glmnet(x = train.data %>% select(-matricula),
y = evadiu,
family = "binomial")
fit = glmnet(x = train.data %>% select(-matricula),
formula = evadiu ~ .,
family = "binomial")
fit = glmnet(x = train.data %>% select(-matricula, -evadiu),
y = train.data$evadiu,
family = "binomial")
str(train.data)
fit = glmnet(x = as.matrix(train.data %>% select(-matricula, -evadiu)),
y = train.data$evadiu,
family = "binomial")
plot(fit, xvar = "dev", label = TRUE)
summary(fit)
fit = glmnet(x = as.matrix(train.data %>% select(-matricula, -evadiu)),
y = train.data$evadiu,
family = "binomial", lambda = 1)
fit = glmnet(x = as.matrix(train.data %>% select(-matricula, -evadiu)),
y = train.data$evadiu,
family = "binomial", lambda = 1)
plot(fit, xvar = "dev", label = TRUE)
glmnet::predict(fit, test.data, type = "class", s = c(0.05, 0.01))
predict(fit, test.data, type = "class", s = c(0.05, 0.01))
predict(fit, as.matrix(test.data), type = "class", s = c(0.05, 0.01))
dt.control=rpart.control(maxdepth=30)
decision.tree.fit <- rpart(evadiu ~ . -matricula,
data=train.data,
method="class",
control=dt.control)
printcp(decision.tree.fit)
decision.tree.fit$cptable[which.min(fit$cptable[,”xerror”]),”CP”]
decision.tree.fit$cptable[which.min(decision.tree.fit$cptable[,”xerror”]),”CP”]
decision.tree.fit$cptable[which.min(decision.tree.fit$cptable[,"xerror"]),"CP"]
ptree<- prune(decision.tree.fit,
+ decision.tree.fit$cptable[which.min(decision.tree.fit$cptable[,"xerror"]),"CP"])
decision.tree.fit <- rpart(evadiu ~ . -matricula,
data=train.data,
method="class")
printcp(decision.tree.fit)
ptree<- prune(decision.tree.fit,
+ decision.tree.fit$cptable[which.min(decision.tree.fit$cptable[,"xerror"]),"CP"])
fancyRpartPlot(ptree, uniform=TRUE,
+ main="Pruned Classification Tree")
fancyRpartPlot(ptree, uniform=TRUE,
+ main="Pruned Classification Tree")
fancyRpartPlot(ptree, uniform=TRUE)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(ptree, uniform=TRUE)
library(rpart.plot)
fancyRpartPlot(ptree, uniform=TRUE)
library(reshape2)
library(dplyr)
library(caret)
dados <- read.csv("../data/treino_classificacao.csv")
names(dados) <- c("matricula", "cod_disciplina", "disciplina", "ano", "periodo", "media", "evadiu")
convert.data.to.model.input <- function(dataframe) {
dataframe <- dataframe %>% select(-cod_disciplina) %>% filter(!is.na(media))
alunos.evadiu <- dataframe %>%
group_by(matricula) %>%
summarise(evadiu = any(evadiu),
ano = first(ano),
periodo = first(periodo))
model.input <- dataframe %>%
group_by(matricula, disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula, disciplina, media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(alunos.evadiu)
model.input$evadiu <- as.factor(model.input$evadiu)
return(model.input)
}
model.input.data <- convert.data.to.model.input(dados)
names(model.input.data) <- c("matricula", "vetorial", "calculo1", "IC", "LP1", "LPT", "P1", "evadiu", "ano", "periodo")
library(Amelia)
missmap(model.input.data, main = "Valores em Falta vs Valores Observados")
model.input.data <- model.input.data %>% select(-LPT)
library(VIM)
disciplinas <- model.input.data %>% select(vetorial, calculo1, IC, LP1, P1)
aggr_plot <- aggr(disciplinas, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(disciplinas), cex.axis=.7, gap=3, ylab=c("Histograma de dados em falta","Padrão"), cex.numbers=.7)
model.input.data <- model.input.data %>%
mutate(vetorial = ifelse(is.na(vetorial),
ifelse(is.na(calculo1),
0.0,
calculo1),
vetorial),
calculo1 = ifelse(is.na(calculo1),
ifelse(is.na(vetorial),
0.0,
vetorial),
calculo1),
LP1 = ifelse(is.na(LP1),
ifelse(is.na(P1),
0.0,
P1),
LP1),
P1 = ifelse(is.na(P1),
ifelse(is.na(LP1),
0.0,
LP1),
P1),
IC = ifelse(is.na(IC),
round(mean(c(vetorial, calculo1, LP1, P1)), 2),
IC)
)
train.data <- model.input.data %>% filter(ano >= 2011, ano != 2015) %>% select(-ano, -periodo)
test.data <- model.input.data %>% filter(ano == 2015) %>% select(-ano, -periodo)
# Conta quantos valores estão abaixo de 7 no vetor passado
medias.abaixo.7 <- function(medias) {
temp <- medias[medias < 7]
return(length(temp))
}
medias.abaixo.7 <- dados %>%
group_by(matricula) %>%
summarise(medias.abaixo.7 = medias.abaixo.7(media))
train.data <- inner_join(train.data, medias.abaixo.7, by = "matricula")
test.data <- inner_join(test.data, medias.abaixo.7, by = "matricula")
set.seed(123)
glm.fit <- train(evadiu ~ . -matricula,
data=train.data,
method="glm",
family="binomial",
na.action = na.omit)
library("rpart")
decision.tree.fit <- rpart(evadiu ~ . -matricula, data=train.data)
summary(glm.fit)
# Usando o modelo para prever os resultados nos dados de teste
test.data$glm.prediction <- predict(glm.fit, test.data)
temp <- test.data %>% select(evadiu, glm.prediction)
TP <- temp %>% filter(evadiu == TRUE, glm.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, glm.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, glm.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, glm.prediction == FALSE) %>% nrow()
dt.prediction <- as.data.frame(predict(decision.tree.fit, test.data))
temp <- apply(dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$dt.prediction <- as.factor(temp)
temp <- test.data %>% select(evadiu, dt.prediction)
TP <- temp %>% filter(evadiu == TRUE, dt.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, dt.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, dt.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, dt.prediction == FALSE) %>% nrow()
library(glmnet)
x <- as.matrix(train.data)
glm.fit <- glmnet()
View(train.data)
x <- as.matrix(train.data %>% select(-matriucla, -evadiu))
y <- train.data$evadiu
x <- as.matrix(train.data %>% select(-matriucla, -evadiu))
y <- train.data$evadiu
x <- as.matrix(train.data %>% select(-matricula, -evadiu))
y <- train.data$evadiu
glm.fit <- glmnet(x, y, alpha=1, family="binomial")
plot(glmmod, xvar="lambda")
plot(glm.fit, xvar="lambda")
coef(glm.fit)[, 10]
best.lambda <- glm.fit$lambda.min
best.lambda
cv.glm.fit <- glmnet(x, y, alpha=1)
cv.glm.fit <- glmnet(x, as.logic(y), alpha=1)
cv.glm.fit <- glmnet(x, as.logical(y), alpha=1)
best.lambda <- cv.glm.fit$lambda.min
best.lambda
library(glmnet)
x <- as.matrix(train.data %>% select(-matricula, -evadiu))
y <- train.data$evadiu
glm.fit <- glmnet(x, y, alpha=1, family="binomial")
plot(glm.fit, xvar="lambda")
# Coeficientes
coef(glm.fit)[, 10]
best.glm.model <- glm.fit <- train(evadiu ~ . P1,
data=train.data,
method="glm",
family="binomial",
na.action = na.omit)
best.glm.model <- glm.fit <- train(evadiu ~ P1,
data=train.data,
method="glm",
family="binomial",
na.action = na.omit)
fitControl <- trainControl(method = "cv", number = 10)
best.glm.model <- glm.fit <- train(evadiu ~ P1,
data=train.data,
method="glm",
family="binomial",
preProcess = c('scale', 'center'),
trControl = fitControl,
na.action = na.omit)
dt.control=rpart.control(maxdepth=30)
decision.tree.fit <- rpart(evadiu ~ . -matricula,
data=train.data,
method="class",
control=dt.control)
printcp(decision.tree.fit)
best.tree<- prune(decision.tree.fit,
+ decision.tree.fit$cptable[which.min(decision.tree.fit$cptable[,"xerror"]),"CP"])
test.data$best.glm.prediction <- predict(best.glm.prediction, test.data)
test.data$best.glm.prediction <- predict(best.glm.fit, test.data)
test.data$best.glm.prediction <- predict(best.glm.model, test.data)
test.data$best.glm.prediction <- predict(best.glm.model, test.data)
temp <- test.data %>% select(evadiu, best.glm.prediction)
TP <- temp %>% filter(evadiu == TRUE, best.glm.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, best.glm.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, best.glm.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, best.glm.prediction == FALSE) %>% nrow()
print(paste('Accuracy', (TP + TN)/(TP+TN+FP+FN)))
print(paste('Precision', TP / (TP + FP)))
print(paste('Recall', TP / (TP + FN)))
best.dt.prediction <- as.data.frame(predict(best.tree, test.data))
temp <- apply(best.dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$best.dt.prediction <- as.factor(temp)
best.dt.prediction <- as.data.frame(predict(best.tree, test.data))
temp <- apply(best.dt.prediction['TRUE'], 2, FUN = function(x){return(x > 0.5)})
test.data$best.dt.prediction <- as.factor(temp)
temp <- test.data %>% select(evadiu, best.dt.prediction)
TP <- temp %>% filter(evadiu == TRUE, best.dt.prediction == TRUE) %>% nrow()
TN <- temp %>% filter(evadiu == FALSE, best.dt.prediction == FALSE) %>% nrow()
FP <- temp %>% filter(evadiu == FALSE, best.dt.prediction == TRUE) %>% nrow()
FN <- temp %>% filter(evadiu == TRUE, best.dt.prediction == FALSE) %>% nrow()
print(paste('Accuracy', (TP + TN)/(TP+TN+FP+FN)))
print(paste('Precision', TP / (TP + FP)))
print(paste('Recall', TP / (TP + FN)))
me.data <- data.frame(P1 = 8)
me.prediction <- predict(best.glm.model, me.data)
me.prediction
me.data <- data.frame(P1 = 8)
me.prediction <- predict(best.glm.model, me.data)
me.prediction
