teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = average_time(trip_code, mean(minute(strptime(arrival_time, "%H:%M:%S")))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
strptime(paste(5, 15, "00", sep = ":"), "%H:%M:%S")
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- floor(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
strptime(paste(5, 15.653254, "00", sep = ":"), "%H:%M:%S")
Deixa o horário médio no formato hh:mm:00
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- as.integer(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
# Deixa o horário médio no formato hh:mm:00
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, minute, "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- as.integer(minute)
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
View(average_time)
View(average_time)
as.integer(12.65654)
as.integer(12.5)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
hour(mean_time) <- hour
minute(mean_time) <- minute
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
return(mean_time);
}
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
average_time <- function(trip_code, minute) {
hour <- as.integer(trip_code)
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
View(teste1)
View(teste2)
trip_code <- function(horario_inicial,horario_final){
hour_i <- hour(strptime(horario_inicial, "%H:%M:%S"))
hour_f <- hour(strptime(horario_final, "%H:%M:%S"))
minute <- minute(strptime(horario_inicial, "%H:%M:%S"))
if (minute < 15) {
trip_code <- paste(hour_i,hour_f,"00", sep=".")
} else if (minute < 30) {
trip_code <- paste(hour_i,hour_f,"15", sep=".")
} else if (minute < 45) {
trip_code <- paste(hour_i,hour_f,"30", sep=".")
} else {
trip_code <- paste(hour_i,hour_f,"45", sep=".")
}
return(trip_code)
}
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(trip_code = trip_code(horario_inicial,horario_final))
View(dados.horarios.paradas)
dados.horarios.paradas <- dados.horarios.paradas %>%
mutate(
tipo_dia = group_of_week_day(week_day),
tipo_parada = ifelse(stop_sequence == 1, "saida", "chegada")
)
teste1 <- dados.horarios.paradas %>%
filter(rota == 500)
strsplit("1.2.3",sep=".")
strsplit("1.2.3",".")
strsplit("1.2.3"," . ")
strsplit("1.2.3"," .")
strsplit("1.2.3",".")
strsplit("1.2.3","[.]")
strsplit("1.2.3","[.]")[1]
strsplit("1.2.3","[.]")[[1]]
strsplit("1.2.3","[.]")
strsplit("1.2.3","[.]")[[1]][1]
strsplit("1.2.3","[.]")[[1]][2]
average_time <- function(trip_code, minute,tipo_parada) {
hour <- 00
if (tipo_parada == "saida"){
hour <- strsplit(trip_code,"[.]")[[1]][1]
} else{ #chegada
hour <- strsplit(trip_code,"[.]")[[1]][2]
}
mean_time <- strptime(paste(hour, as.integer(minute), "00", sep = ":"), "%H:%M:%S")
result <- strftime(mean_time, format = "%H:%M:%S")
return(result);
}
teste1 <- dados.horarios.paradas %>%
filter(rota == 500)
# WARNING: Este bloco demora muito para rodar. O teste aparentemente deu certo. Falta calcular variância
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
View(teste2)
teste2 <- teste2 %>%
ungroup() %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste2 %>%
ungroup() %>%
group_by(rota, tipo_dia, trip_code) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste2 %>%
ungroup() %>%
group_by(trip_code, media_min,tipo_parada) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
teste2 <- teste1 %>%
group_by(rota, tipo_dia, trip_code, tipo_parada) %>%
summarise(
media_min = mean(minute(strptime(arrival_time, "%H:%M:%S"))),
n = n()
)
teste2 <- teste2 %>%
ungroup() %>%
group_by(trip_code, media_min,tipo_parada) %>%
mutate(horario_medio = average_time(trip_code, media_min,tipo_parada)) %>%
select(-media_min)
View(teste2)
install.packages("dplyr")
View(dados.horarios.paradas)
View(dados.horarios.paradas)
View(dados.horarios.paradas)
View(teste2)
View(dados.horarios.paradas)
View(viagens.por.dia)
getwd()
getwd()
schedules_ctba <- read.csv("~/Analytics/busmonitor/R/best_trip_recommender/data/schedules_ctba.csv")
View(schedules_ctba)
library(lubridate)
hms("2016-06-24 06:44:19")
ymd("2016-06-24 06:44:19")
as.Date("2016-06-24 06:44:19")
as.Time("2016-06-24 06:44:19")
format("2016-06-24 06:44:19", "%H:%M:%S")
format(ymd_hms("2016-06-24 06:44:19"), "%H:%M:%S")
schedules_ctba$inicio_viagem <- format(ymd_hms(schedules_ctba$inicio_viagem), "%H:%M:%S")
schedules_ctba$fim_viagem <- format(ymd_hms(schedules_ctba$fim_viagem), "%H:%M:%S")
write.csv(schedules_ctba, "schedules_ctba.csv")
library(dplyr)
library(ggplot2)
library(reshape2)
library(car)
library(leaps)
setwd("Predictive-Data-Analysis/2nd lab/")
alunos.graduados <- read.csv("../data/graduados.csv")
# Retira os valores NA das médias
alunos.graduados <- alunos.graduados %>%
arrange(matricula) %>%
filter(!is.na(media))
# Calcula o CRA de cada aluno
graduados.cra <- alunos.graduados %>%
group_by(matricula) %>%
mutate(cra.contrb = media*creditos) %>%
summarise(cra = round(sum(cra.contrb)/sum(creditos), 2))
disciplinas.iniciais <- c(
"Cálculo Diferencial e Integral I",
"Álgebra Vetorial e Geometria Analítica",
"Leitura e Produção de Textos",
"Programação I",
"Introdução à Computação",
"Laboratório de Programação I",
"Cálculo Diferencial e Integral II",
"Matemática Discreta",
"Programação II",
"Teoria dos Grafos",
"Fundamentos de Física Clássica",
"Laboratório de Programação II"
)
# Transforma o dataframe em um formato ideal para ser utilizado como entrada do modelo
graduados.model.input <- alunos.graduados %>%
filter(disciplina %in% disciplinas.iniciais) %>%
group_by(matricula,disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula,disciplina,media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(graduados.cra)
cra.model.fit <- lm(formula = cra ~ . -matricula, graduados.model.input, na.action = na.omit)
summary(cra.model.fit)
regsubsets.out <-
regsubsets(cra ~ . -matricula,
data = graduados.model.input,
nbest = 1,       # 1 único modelo para cada cojunto de preditores
nvmax = NULL,    # NULL para não haver limite no número de variáveis preditoras
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
summary.out
# Qual dos doze modelos contém o melhor r² ajustado
which.max(summary.out$adjr2)
# [1] 6
# Quais variáveis estão presentes nesse modelo
summary.out$which[6,]
graduados.best.input <- graduados.model.input %>%
dplyr::select(Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos )
cra.model.fit <- lm(formula = cra ~ . -matricula, graduados.model.input, na.action = na.omit)
summary(cra.model.fit)
graduados.best.input <- graduados.model.input %>%
dplyr::select(Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos )
cra.best.fit <- lm(formula = cra ~ . -matricula, graduados.model.input, na.action = na.omit)
summary(cra.best.fit)
graduados.best.input <- graduados.model.input %>%
dplyr::select(Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos )
cra.best.fit <- lm(formula = cra ~ . -matricula, graduados.best.input, na.action = na.omit)
summary(cra.best.fit)
graduados.best.input <- graduados.model.input %>%
dplyr::select(Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos, cra, matricula)
cra.best.fit <- lm(formula = cra ~ . -matricula, graduados.best.input)
summary(cra.best.fit)
summary.out$which[7,]
graduados.best.input <- graduados.model.input %>%
dplyr::select(Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos, cra, matricula, Programação.I)
cra.best.fit <- lm(formula = cra ~ . -matricula, graduados.best.input)
summary(cra.best.fit)
cra.model.fit <- lm(formula = cra ~ . -matricula, graduados.model.input, na.action = na.omit)
summary(cra.model.fit)
str(summary(cra.best.fit))
summary(cra.best.fit)$adj.r.squared
summary(cra.model.fit)$adj.r.squared
summary(cra.best.fit)$rse
summary(cra.best.fit)
summary(cra.model.fit)
graduados.best.input <- graduados.model.input %>%
dplyr::select(
Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos, cra, matricula
)
cra.best.fit <- lm(formula = cra ~ . -matricula, graduados.best.input)
summary(cra.best.fit)
str(summary(cra.best.fit))
summary(cra.best.fit)$coefficients[,4]
type(summary(cra.best.fit)$coefficients[,4])
typeof(summary(cra.best.fit)$coefficients[,4])
adjr2.best.model <- summary(cra.best.fit)$adj.r.squared
summary(cra.model.fit)$coefficients[, 2]
summary(cra.model.fit)$rse
setwd("/home/luiz/Faculdade/Predictive-Data-Analysis/2nd lab/")
# setwd("/home/luiz/Faculdade/Predictive-Data-Analysis/2nd lab/")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# setwd("/home/luiz/Faculdade/Predictive-Data-Analysis/2nd lab/")
# Chunk 2
library(dplyr)
library(ggplot2)
library(reshape2)
library(car)
library(leaps)
alunos.graduados <- read.csv("../data/graduados.csv")
# Chunk 3
# Retira os valores NA das médias
alunos.graduados <- alunos.graduados %>%
arrange(matricula) %>%
filter(!is.na(media))
# Calcula o CRA de cada aluno
graduados.cra <- alunos.graduados %>%
group_by(matricula) %>%
mutate(cra.contrb = media*creditos) %>%
summarise(cra = round(sum(cra.contrb)/sum(creditos), 2))
disciplinas.iniciais <- c(
"Cálculo Diferencial e Integral I",
"Álgebra Vetorial e Geometria Analítica",
"Leitura e Produção de Textos",
"Programação I",
"Introdução à Computação",
"Laboratório de Programação I",
"Cálculo Diferencial e Integral II",
"Matemática Discreta",
"Programação II",
"Teoria dos Grafos",
"Fundamentos de Física Clássica",
"Laboratório de Programação II"
)
# Transforma o dataframe em um formato ideal para ser utilizado como entrada do modelo
graduados.model.input <- alunos.graduados %>%
filter(disciplina %in% disciplinas.iniciais) %>%
group_by(matricula,disciplina)  %>%
filter(media == max(media)) %>%
ungroup() %>%
select(matricula,disciplina,media) %>%
mutate(disciplina = as.factor(gsub(" ",".",disciplina))) %>%
dcast(matricula ~ disciplina, mean) %>%
merge(graduados.cra)
# Chunk 4
cra.model.fit <- lm(formula = cra ~ . -matricula, graduados.model.input, na.action = na.omit)
summary(cra.model.fit)
# Chunk 5
# library(leaps)
regsubsets.out <-
regsubsets(cra ~ . -matricula,
data = graduados.model.input,
nbest = 1,       # 1 único modelo para cada cojunto de preditores
nvmax = NULL,    # NULL para não haver limite no número de variáveis preditoras
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
summary.out
# Chunk 6
# Qual dos doze modelos contém o maior r² ajustado
which.max(summary.out$adjr2)
# Quais variáveis estão presentes nesse modelo
summary.out$which[6,]
# Chunk 7
graduados.best.input <- graduados.model.input %>%
dplyr::select(
Álgebra.Vetorial.e.Geometria.Analítica, Introdução.à.Computação,
Leitura.e.Produção.de.Textos, Matemática.Discreta, Programação.II,
Teoria.dos.Grafos, cra)
cra.best.fit <- lm(formula = cra ~ ., graduados.best.input)
summary(cra.best.fit)
# Chunk 8
graduados.model.input <- na.omit(graduados.model.input)
graduados.model.input$residuals <- residuals(cra.model.fit)
variable.names <- c(names(graduados.model.input)[2:13], "residuals")
plotDF <- melt(graduados.model.input[, variable.names], id="residuals")
ggplot(plotDF, aes(x=value, y=residuals)) +
geom_point(color="slateblue") + facet_wrap(~ variable)
# Chunk 9
model.input.semester.1 <- graduados.model.input %>%
select(cra, matricula, Álgebra.Vetorial.e.Geometria.Analítica, Cálculo.Diferencial.e.Integral.I,
Introdução.à.Computação, Laboratório.de.Programação.I, Programação.I, Leitura.e.Produção.de.Textos)
model.input.semester.2 <- graduados.model.input %>%
select(cra, matricula, Cálculo.Diferencial.e.Integral.II, Fundamentos.de.Física.Clássica,
Laboratório.de.Programação.II, Matemática.Discreta, Programação.II, Teoria.dos.Grafos)
model.semester.1 <- lm(cra ~ . -matricula, model.input.semester.1)
model.semester.2 <- lm(cra ~ . -matricula, model.input.semester.2)
summary(model.semester.1)
summary(model.semester.2)
# Chunk 10
## Modelo para o 1º semestre
regsubsets.semester.1 <-
regsubsets(cra ~ . -matricula,
data = model.input.semester.1,
nbest = 1,       # 1 único modelo para cada cojunto de preditores
nvmax = NULL,    # NULL para não haver limite no número de variáveis preditoras
force.in = NULL, force.out = NULL,
method = "exhaustive")
# summary.semester.1 <- summary(regsubsets.semester.1)
# index1 <- which.max(summary.semester.1$adjr2)
# summary.semester.1$which[index1,]
# Vamos tirar as disciplinas Programação I e Cálculo I, pois sem estas duas já conseguimos um modelo satisfatório.
best.input.semester.1 <- model.input.semester.1 %>%
select(-Programação.I, -Cálculo.Diferencial.e.Integral.I)
best.model.semester.1 <- lm(cra ~ . -matricula, best.input.semester.1)
## Modelo para o 2º semestre
regsubsets.semester.2 <-
regsubsets(cra ~ . -matricula,
data = model.input.semester.2,
nbest = 1,       # 1 único modelo para cada cojunto de preditores
nvmax = NULL,    # NULL para não haver limite no número de variáveis preditoras
force.in = NULL, force.out = NULL,
method = "exhaustive")
# summary.semester.2 <- summary(regsubsets.semester.2)
# index2 <- which.max(summary.semester.2$adjr2)
# summary.semester.2$which[index2,]
# Vamos tirar as disciplinas Física Clássica, Cálculo II, Laboratório de Programação II para otimizar o modelo.
best.input.semester.2 <- model.input.semester.2 %>%
select(-Fundamentos.de.Física.Clássica, -Cálculo.Diferencial.e.Integral.II, -Laboratório.de.Programação.II)
best.model.semester.2 <- lm(cra ~ . -matricula, best.input.semester.2)
summary(best.model.semester.1)
summary(best.model.semester.2)
# Chunk 11
comparing.models <- data.frame(modelo = c("1º período", "2º período", "ambos"),
r_quadrado_ajustado = c(0.4641, 0.6457, 0.6075),
RSE = c(0.6221, 0.5058, 0.526))
data.melted <- melt(comparing.models, id.vars='modelo')
ggplot(data.melted, aes(modelo, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
labs(title = "Comparação de modelos", x = "modelo", y = "valor", fill = "estatística")
# Chunk 12
notas.disciplinas <- data.frame(matricula = c(114110463),
Matemática.Discreta = c(9.4),
Programação.II = c(8.8),
Teoria.dos.Grafos = c(10.0),
Álgebra.Vetorial.e.Geometria.Analítica = c(9.7),
Introdução.à.Computação = c(9.4),
Laboratório.de.Programação.I = c(8.0),
Leitura.e.Produção.de.Textos = c(8.6))
predicao.cra.1 <- round(predict(best.model.semester.1, notas.disciplinas), 2)
predicao.cra.2 <- round(predict(best.model.semester.2, notas.disciplinas), 2)
predicao.cra.ambos <- round(predict(cra.best.fit, notas.disciplinas), 2)
# Chunk 13
cat(paste(" Predição do modelo do 1º semestre: ", predicao.cra.1, "\n",
"Predição do modelo do 2º semestre: ", predicao.cra.2, "\n",
"Predição do modelo de ambos os semestres: ", predicao.cra.ambos))
notas.disciplinas <- data.frame(matricula = c(114110463),
Matemática.Discreta = c(6.8),
Programação.II = c(7.9),
Teoria.dos.Grafos = c(8.3),
Álgebra.Vetorial.e.Geometria.Analítica = c(8.1),
Introdução.à.Computação = c(9.4),
Laboratório.de.Programação.I = c(8.0),
Leitura.e.Produção.de.Textos = c(8.6))
predicao.cra.2 <- round(predict(best.model.semester.2, notas.disciplinas), 2)
predicao.cra.2
